@{
    ViewData["Title"] = "Music Player";
}

<script src="https://unpkg.com/wavesurfer.js"></script>

<div id="waveform"></div>

<div class="controls" style="text-align:center;">
    <button onclick="skipBackward()">Backward</button>

    <button onclick="playPause()">Play/Pause</button>

    <button onclick="skipForward()">Forward</button>

    <button onclick="toggleMute()">Toggle Mute</button>
</div>
<br />

<!-- Affiche toutes les playlists en music associées d'un utilisteur -->
<!-- TODO: clique sur le nom d'une playlist pour afficher les musiques qu'elle contient -->
@{
    // var userPlaylist = ((List<Playlist>)ViewData["playlists"]).First();
}

<div style="text-align: center">
    <form style="width: 30%; display: inline-block; background-color: rgba(255, 255, 255, 0.5);" enctype="multipart/form-data" asp-controller="MusicPlayer" asp-action="PlaylistManagement" method="post">
        <!-- Ajoute une ligne dans la table playlist -->
        <label style="font-size:36px;">Create playlist</label>
        <button name="action" type="submit" value="AP{0}">@* @userPlaylist.IdUser *@
            <img src="/images/icons/add.png" style="vertical-align:middle;" width="30" name="file" value="filename" />
        </button>
        <br />
        @foreach (var playlist in ViewData["playlists"] as IList<Playlist>)
        {
            <label style="font-size:36px;">@playlist.PlaylistTitle</label>
            <input for="action" type="hidden" name="title" value="" />

            <!-- Update la colonne PlaylistTitle dans la table playlist -->
            <button name="action" type="submit" value="UP{@playlist.Id}">
                <img src="/images/icons/edit.png" style="vertical-align: middle;" width="20" />
            </button>
            <!-- Supprime une ligne dans la table playlist -->
            <button name="action" type="submit" value="DP{@playlist.Id}">
                <img src="/images/icons/delete.png" style="vertical-align: middle;" width="20" />
            </button>

            <br />
            @foreach (var music in ViewData["musics"] as IList<Music>)
            {
                if (playlist.Id == music.IdPlaylist)
                {
                    <label for="action" style="font-size:24px;" name="title" value="title" ondblclick="this.readOnly='';">@music.MusicTitle</label>
                    <input for="action" type="hidden" name="title" value="" />
                    <!-- Update la colonne MusicTitle dans la table music -->

                    <button name="action" type="submit" value="UM{@music.Id}">
                        <img src="/images/icons/edit.png" style="vertical-align:top;" width="15" />
                    </button>

                    <!-- Supprime une ligne dans la table music -->
                    <button name="action" type="submit" value="DM{@music.Id}">
                        <img src="/images/icons/delete.png" style="vertical-align:top;" width="15" />
                    </button>
                    <br />
                }
            }
            <!-- Ajoute une ligne dans la table music -->
            <input for="action" type="file" name="file" value="" />
            <button name="action" type="submit" value="AM{@playlist.Id}">
                <img src="/images/icons/add.png" style="vertical-align: middle;" width="20" />
            </button>
            <br />
        }
    </form>
</div>

<script>
    @*list = [
        @{
            string virgule = ",";
            List<int> playlistFolders = new List<int>();
            foreach (var playlist in ViewData["playlists"] as IList<Playlist>)
            {
                @playlist.Id@virgule    
            }
        }     
    ];*@

    // console.log(list);
    @*var id = @userPlaylist.IdUser;*@

    // var userFolder = ('/media/' + id + '/');
    var userFolder = ('/media/' + 'audio.mp3');
    // console.log(userFolder + list[0] + '/audio.mp3');
    
    // create : Create an instance, passing the container selector and options:
    var wavesurfer = WaveSurfer.create({
    container: '#waveform',
    waveColor: 'violet',
    progressColor: 'purple'
    });

    // load : Loads audio from URL via XHR
    wavesurfer.load(userFolder);

    // on : Subscribe to some events
    wavesurfer.on('ready', function () { // ready : When audio is loaded, decoded and the waveform drawn.
        // load : Loads audio from URL via XHR
        wavesurfer.load(userFolder);
        wavesurfer.play();
    })

    // Rewind skipLength seconds.
    function skipBackward() {
    wavesurfer.skipBackward();
    }

    // Plays if paused, pauses if playing.
    function playPause() {
    wavesurfer.playPause();
    }

    // Skip ahead skipLength seconds.
    function skipForward() {
    wavesurfer.skipForward();
    }
    // Toggles the volume on and off.
    function toggleMute() {
    wavesurfer.toggleMute();
    }
</script>


<script>
    document.querySelectorAll("label").forEach(function (node) {
        node.ondblclick = function () { // double click pour edit (mettre un input à la place d'un label)
            var oldValue = this.innerHTML;
            var input = document.createElement("input"); // input de changement de text du label

            input.value = oldValue;
            input.onblur = function () { // après être sorti du mode edit
                var hiddenInput = document.querySelector('input[type="hidden"]');

                if (this.value != "") {
                    var newValue = this.value;
                    this.parentNode.innerHTML = newValue;
                    hiddenInput.value = newValue;
                } else {
                    this.parentNode.innerHTML = oldValue;
                    hiddenInput.value = oldValue;
                }
                // hiddenInput.createElement("name").value = "test"; // creation element name

            } // fin blur
            this.innerHTML = "";
            this.appendChild(input);
            input.focus();
        } // fin dblclick
    });
</script>